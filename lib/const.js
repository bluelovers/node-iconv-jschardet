"use strict";
/**
 * Created by user on 2019/3/21.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.NodeEncoding = [
    "ascii" /* ASCII */,
    "utf8" /* UTF8 */,
    "utf-8" /* UTF_8 */,
    "utf16le" /* UTF16_LE */,
    "ucs2" /* UCS2 */,
    "base64" /* BASE64 */,
    "latin1" /* LATIN1 */,
    "binary" /* BINARY */,
    "hex" /* HEX */,
];
exports.codec_table = {
    ["big5hkscs" /* big5hkscs */]: _codecTable({
        id: 'big5',
        name: "Big5" /* BIG5 */,
    }),
    ["cp936" /* cp936 */]: _codecTable({
        name: "GB2312" /* GB2312 */,
    }),
    ["gbk" /* gbk */]: _codecTable({
        name: "GBK" /* GBK */,
    }),
    ["eucjp" /* eucjp */]: _codecTable({
        name: "EUC-JP" /* EUC_JP */,
    }),
    ["shiftjis" /* shiftjis */]: _codecTable({
        name: "SHIFT_JIS" /* SHIFT_JIS */,
    }),
    //------------------
    ["utf8" /* utf8 */]: _codecTable({
        name: "UTF-8" /* UTF_8 */,
    }),
    ["ucs2" /* ucs2 */]: _codecTable({
        name: "UTF-16LE" /* UTF_16_LE */,
    }),
    //------------------
    ["utf16be" /* utf16be */]: _codecTable({
        name: "UTF-16BE" /* UTF_16_BE */,
    }),
    /**
     * Error: Encoding not recognized: '' (searched as: '')
     */
    ["utf32be" /* utf32be */]: _codecTable({
        name: "UTF-32BE" /* UTF_32_BE */,
        not: true,
    }),
    ["utf32le" /* utf32le */]: _codecTable({
        name: "UTF-32LE" /* UTF_32_LE */,
        not: true,
    }),
};
var EnumEncoding;
(function (EnumEncoding) {
    EnumEncoding["BIG5"] = "Big5";
    EnumEncoding["UTF8"] = "UTF-8";
    EnumEncoding["GBK"] = "Gbk";
})(EnumEncoding = exports.EnumEncoding || (exports.EnumEncoding = {}));
function codecDataNameToUpperCase(key) {
    return key.toUpperCase();
}
exports.codecDataNameToUpperCase = codecDataNameToUpperCase;
function _codecTable(data) {
    return data;
}
exports._codecTable = _codecTable;
function _enc(encoding) {
    return encoding
        .toString()
        .toLowerCase()
        .replace(/[^0-9a-z]|:\d{4}$/g, '');
}
exports._enc = _enc;
exports.default = exports;
//# sourceMappingURL=data:application/json;base64,