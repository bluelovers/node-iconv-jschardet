"use strict";
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
const iconvLite = require("iconv-lite");
exports.iconvLite = iconvLite;
const jschardet = require("jschardet");
exports.jschardet = jschardet;
var encodingExists = iconvLite.encodingExists;
exports.encodingExists = encodingExists;
__export(require("./encoding"));
__export(require("./lib/const"));
const encoding_1 = require("./encoding");
exports.disableCodecDataWarn = encoding_1.disableCodecDataWarn;
const const_1 = require("./lib/const");
/**
 * 停用編碼檢測警告
 */
function skipDecodeWarning(bool = true) {
    // @ts-ignore
    return iconvLite.skipDecodeWarning = bool;
}
exports.skipDecodeWarning = skipDecodeWarning;
/**
 * 將輸入內容轉換為 Buffer
 */
function BufferFrom(str, encoding, from) {
    let data;
    if (from) {
        data = Buffer.from(str, from);
    }
    else {
        data = str;
    }
    data = decode(data);
    let buf = iconvLite.encode(data, encoding);
    return buf;
}
exports.BufferFrom = BufferFrom;
/**
 * 檢測輸入內容編碼
 */
function detect(str, plus) {
    let ret = jschardet.detect(str);
    if (plus) {
        let cd = encoding_1.codec_data(ret.encoding);
        if (cd) {
            if (cd.name) {
                ret.name = cd.name;
            }
            ret.id = cd.id;
        }
    }
    if (!ret.name) {
        ret.name = ret.encoding;
    }
    return ret;
}
exports.detect = detect;
/**
 * 檢測輸入內容編碼並且轉換為 字串
 */
function decode(str, from = null) {
    let c;
    if (!from) {
        c = detect(str);
        from = c.encoding;
    }
    let data;
    let cd = encoding_1.codec_data(from);
    let key;
    if (cd && cd.name && !cd.not) {
        key = cd.name;
    }
    else {
        key = from;
    }
    switch (const_1.codecDataNameToUpperCase(key)) {
        //case 'BIG5':
        //case 'GBK':
        //case 'GB2312':
        //case 'UTF-16LE':
        //case 'UTF-16BE':
        //case 'EUC-JP':
        //case 'SHIFT_JIS':
        case "BIG5" /* BIG5 */:
        case "GBK" /* GBK */:
        case "GB2312" /* GB2312 */:
        case "UTF-16LE" /* UTF_16_LE */:
        case "UTF-16BE" /* UTF_16_BE */:
        case "EUC-JP" /* EUC_JP */:
        case "SHIFT_JIS" /* SHIFT_JIS */:
            data = iconvLite.decode(str, from);
            break;
        //case 'ASCII':
        //case 'UTF-8':
        case "ASCII" /* ASCII */:
        case "UTF-8" /* UTF_8 */:
            data = str;
            break;
        default:
            c = c || detect(str);
            // @ts-ignore
            if (!iconvLite.skipDecodeWarning) {
                encoding_1.console.warn('decode', from, c);
            }
            //data = str;
            data = iconvLite.decode(str, from);
            break;
    }
    return data;
}
exports.decode = decode;
/**
 * 檢測輸入內容編碼並且轉換為 Buffer
 */
function encode(str, to = "utf8" /* UTF8 */, from = null) {
    let buf = BufferFrom(str, "utf8" /* UTF8 */);
    // @ts-ignore
    return iconvLite.encode(buf, to);
}
exports.encode = encode;
exports.default = exports;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLHdDQUF5QztBQXFCeEMsOEJBQVM7QUFwQlYsdUNBQXdDO0FBbUJ2Qyw4QkFBUztBQWpCVixJQUFPLGNBQWMsR0FBRyxTQUFTLENBQUMsY0FBYyxDQUFDO0FBUWhELHdDQUFjO0FBTmYsZ0NBQTJCO0FBQzNCLGlDQUE0QjtBQUM1Qix5Q0FBK0Y7QUFnQjlGLCtCQWhCNkIsK0JBQW9CLENBZ0I3QjtBQWZyQix1Q0FBMEc7QUFrQjFHOztHQUVHO0FBQ0gsU0FBZ0IsaUJBQWlCLENBQUMsT0FBZ0IsSUFBSTtJQUVyRCxhQUFhO0lBQ2IsT0FBTyxTQUFTLENBQUMsaUJBQWlCLEdBQUcsSUFBSSxDQUFDO0FBQzNDLENBQUM7QUFKRCw4Q0FJQztBQUVEOztHQUVHO0FBQ0gsU0FBZ0IsVUFBVSxDQUFDLEdBQUcsRUFBRSxRQUFtQixFQUFFLElBQWdCO0lBRXBFLElBQUksSUFBSSxDQUFDO0lBRVQsSUFBSSxJQUFJLEVBQ1I7UUFDQyxJQUFJLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7S0FDOUI7U0FFRDtRQUNDLElBQUksR0FBRyxHQUFHLENBQUM7S0FDWDtJQUVELElBQUksR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDcEIsSUFBSSxHQUFHLEdBQUcsU0FBUyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFFM0MsT0FBTyxHQUFHLENBQUM7QUFDWixDQUFDO0FBakJELGdDQWlCQztBQUVEOztHQUVHO0FBQ0gsU0FBZ0IsTUFBTSxDQUFDLEdBQUcsRUFBRSxJQUFjO0lBRXpDLElBQUksR0FBRyxHQUFHLFNBQVMsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUF1QixDQUFDO0lBRXRELElBQUksSUFBSSxFQUNSO1FBQ0MsSUFBSSxFQUFFLEdBQUcscUJBQVUsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDbEMsSUFBSSxFQUFFLEVBQ047WUFDQyxJQUFJLEVBQUUsQ0FBQyxJQUFJLEVBQ1g7Z0JBQ0MsR0FBRyxDQUFDLElBQUksR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDO2FBQ25CO1lBRUQsR0FBRyxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDO1NBQ2Y7S0FDRDtJQUVELElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUNiO1FBQ0MsR0FBRyxDQUFDLElBQUksR0FBRyxHQUFHLENBQUMsUUFBUSxDQUFDO0tBQ3hCO0lBRUQsT0FBTyxHQUFHLENBQUM7QUFDWixDQUFDO0FBeEJELHdCQXdCQztBQUVEOztHQUVHO0FBQ0gsU0FBZ0IsTUFBTSxDQUFDLEdBQUcsRUFBRSxPQUFrQixJQUFJO0lBRWpELElBQUksQ0FBQyxDQUFDO0lBRU4sSUFBSSxDQUFDLElBQUksRUFDVDtRQUNDLENBQUMsR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDaEIsSUFBSSxHQUFHLENBQUMsQ0FBQyxRQUFRLENBQUM7S0FDbEI7SUFFRCxJQUFJLElBQUksQ0FBQztJQUVULElBQUksRUFBRSxHQUFHLHFCQUFVLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFMUIsSUFBSSxHQUFXLENBQUM7SUFFaEIsSUFBSSxFQUFFLElBQUksRUFBRSxDQUFDLElBQUksSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQzVCO1FBQ0MsR0FBRyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUM7S0FDZDtTQUVEO1FBQ0MsR0FBRyxHQUFHLElBQUksQ0FBQztLQUNYO0lBRUQsUUFBUSxnQ0FBd0IsQ0FBQyxHQUFHLENBQUMsRUFDckM7UUFDQyxjQUFjO1FBQ2QsYUFBYTtRQUNiLGdCQUFnQjtRQUNoQixrQkFBa0I7UUFDbEIsa0JBQWtCO1FBQ2xCLGdCQUFnQjtRQUNoQixtQkFBbUI7UUFDbkIsdUJBQXdDO1FBQ3hDLHFCQUF1QztRQUN2QywyQkFBMEM7UUFDMUMsZ0NBQTZDO1FBQzdDLGdDQUE2QztRQUM3QywyQkFBMEM7UUFDMUM7WUFDQyxJQUFJLEdBQUcsU0FBUyxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDbkMsTUFBTTtRQUNQLGVBQWU7UUFDZixlQUFlO1FBQ2YseUJBQXlDO1FBQ3pDO1lBQ0MsSUFBSSxHQUFHLEdBQUcsQ0FBQztZQUNYLE1BQU07UUFDUDtZQUNDLENBQUMsR0FBRyxDQUFDLElBQUksTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBRXJCLGFBQWE7WUFDYixJQUFJLENBQUMsU0FBUyxDQUFDLGlCQUFpQixFQUNoQztnQkFDQyxrQkFBTyxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDO2FBQ2hDO1lBRUQsYUFBYTtZQUNiLElBQUksR0FBRyxTQUFTLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQztZQUNuQyxNQUFNO0tBQ1A7SUFFRCxPQUFPLElBQUksQ0FBQztBQUNiLENBQUM7QUFoRUQsd0JBZ0VDO0FBRUQ7O0dBRUc7QUFDSCxTQUFnQixNQUFNLENBQUMsR0FBRyxFQUFFLHNCQUF1QyxFQUFFLE9BQWtCLElBQUk7SUFFMUYsSUFBSSxHQUFHLEdBQUcsVUFBVSxDQUFDLEdBQUcsb0JBQTBCLENBQUM7SUFFbkQsYUFBYTtJQUNiLE9BQU8sU0FBUyxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDbEMsQ0FBQztBQU5ELHdCQU1DO0FBRUQsa0JBQWUsT0FBbUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBpY29udkxpdGUgPSByZXF1aXJlKCdpY29udi1saXRlJyk7XG5pbXBvcnQganNjaGFyZGV0ID0gcmVxdWlyZSgnanNjaGFyZGV0Jyk7XG5cbmltcG9ydCBlbmNvZGluZ0V4aXN0cyA9IGljb252TGl0ZS5lbmNvZGluZ0V4aXN0cztcblxuZXhwb3J0ICogZnJvbSAnLi9lbmNvZGluZyc7XG5leHBvcnQgKiBmcm9tICcuL2xpYi9jb25zdCc7XG5pbXBvcnQgeyBjb2RlY19kYXRhLCBjb25zb2xlLCBkaXNhYmxlQ29kZWNEYXRhV2FybiwgSURldGVjdERhdGEsIHZFbmNvZGluZyB9IGZyb20gJy4vZW5jb2RpbmcnO1xuaW1wb3J0IHsgY29kZWNEYXRhTmFtZVRvVXBwZXJDYXNlLCBDT0RFQ19EQVRBX05BTUVfVE9fVVBQRVJfQ0FTRSwgRU5VTV9OT0RFX0VOQ09ESU5HIH0gZnJvbSAnLi9saWIvY29uc3QnO1xuXG5leHBvcnQge1xuXHRlbmNvZGluZ0V4aXN0cyxcblxuXHQvKlxuXHRjb2RlY19kYXRhLFxuXHRfZW5jLFxuXHRpc05vZGVFbmNvZGluZyxcblx0Tm9kZUVuY29kaW5nLFxuXHQqL1xuXG5cdGpzY2hhcmRldCxcblx0aWNvbnZMaXRlLFxuXG5cdGRpc2FibGVDb2RlY0RhdGFXYXJuLFxufVxuXG4vKipcbiAqIOWBnOeUqOe3qOeivOaqoua4rOitpuWRilxuICovXG5leHBvcnQgZnVuY3Rpb24gc2tpcERlY29kZVdhcm5pbmcoYm9vbDogYm9vbGVhbiA9IHRydWUpOiBib29sZWFuXG57XG5cdC8vIEB0cy1pZ25vcmVcblx0cmV0dXJuIGljb252TGl0ZS5za2lwRGVjb2RlV2FybmluZyA9IGJvb2w7XG59XG5cbi8qKlxuICog5bCH6Ly45YWl5YWn5a656L2J5o+b54K6IEJ1ZmZlclxuICovXG5leHBvcnQgZnVuY3Rpb24gQnVmZmVyRnJvbShzdHIsIGVuY29kaW5nOiB2RW5jb2RpbmcsIGZyb20/OiB2RW5jb2RpbmcpOiBCdWZmZXJcbntcblx0bGV0IGRhdGE7XG5cblx0aWYgKGZyb20pXG5cdHtcblx0XHRkYXRhID0gQnVmZmVyLmZyb20oc3RyLCBmcm9tKTtcblx0fVxuXHRlbHNlXG5cdHtcblx0XHRkYXRhID0gc3RyO1xuXHR9XG5cblx0ZGF0YSA9IGRlY29kZShkYXRhKTtcblx0bGV0IGJ1ZiA9IGljb252TGl0ZS5lbmNvZGUoZGF0YSwgZW5jb2RpbmcpO1xuXG5cdHJldHVybiBidWY7XG59XG5cbi8qKlxuICog5qqi5ris6Ly45YWl5YWn5a6557eo56K8XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZXRlY3Qoc3RyLCBwbHVzPzogYm9vbGVhbilcbntcblx0bGV0IHJldCA9IGpzY2hhcmRldC5kZXRlY3Qoc3RyKSBhcyBhbnkgYXMgSURldGVjdERhdGE7XG5cblx0aWYgKHBsdXMpXG5cdHtcblx0XHRsZXQgY2QgPSBjb2RlY19kYXRhKHJldC5lbmNvZGluZyk7XG5cdFx0aWYgKGNkKVxuXHRcdHtcblx0XHRcdGlmIChjZC5uYW1lKVxuXHRcdFx0e1xuXHRcdFx0XHRyZXQubmFtZSA9IGNkLm5hbWU7XG5cdFx0XHR9XG5cblx0XHRcdHJldC5pZCA9IGNkLmlkO1xuXHRcdH1cblx0fVxuXG5cdGlmICghcmV0Lm5hbWUpXG5cdHtcblx0XHRyZXQubmFtZSA9IHJldC5lbmNvZGluZztcblx0fVxuXG5cdHJldHVybiByZXQ7XG59XG5cbi8qKlxuICog5qqi5ris6Ly45YWl5YWn5a6557eo56K85Lim5LiU6L2J5o+b54K6IOWtl+S4slxuICovXG5leHBvcnQgZnVuY3Rpb24gZGVjb2RlKHN0ciwgZnJvbTogdkVuY29kaW5nID0gbnVsbCk6IHN0cmluZ1xue1xuXHRsZXQgYztcblxuXHRpZiAoIWZyb20pXG5cdHtcblx0XHRjID0gZGV0ZWN0KHN0cik7XG5cdFx0ZnJvbSA9IGMuZW5jb2Rpbmc7XG5cdH1cblxuXHRsZXQgZGF0YTtcblxuXHRsZXQgY2QgPSBjb2RlY19kYXRhKGZyb20pO1xuXG5cdGxldCBrZXk6IHN0cmluZztcblxuXHRpZiAoY2QgJiYgY2QubmFtZSAmJiAhY2Qubm90KVxuXHR7XG5cdFx0a2V5ID0gY2QubmFtZTtcblx0fVxuXHRlbHNlXG5cdHtcblx0XHRrZXkgPSBmcm9tO1xuXHR9XG5cblx0c3dpdGNoIChjb2RlY0RhdGFOYW1lVG9VcHBlckNhc2Uoa2V5KSlcblx0e1xuXHRcdC8vY2FzZSAnQklHNSc6XG5cdFx0Ly9jYXNlICdHQksnOlxuXHRcdC8vY2FzZSAnR0IyMzEyJzpcblx0XHQvL2Nhc2UgJ1VURi0xNkxFJzpcblx0XHQvL2Nhc2UgJ1VURi0xNkJFJzpcblx0XHQvL2Nhc2UgJ0VVQy1KUCc6XG5cdFx0Ly9jYXNlICdTSElGVF9KSVMnOlxuXHRcdGNhc2UgQ09ERUNfREFUQV9OQU1FX1RPX1VQUEVSX0NBU0UuQklHNTpcblx0XHRjYXNlIENPREVDX0RBVEFfTkFNRV9UT19VUFBFUl9DQVNFLkdCSzpcblx0XHRjYXNlIENPREVDX0RBVEFfTkFNRV9UT19VUFBFUl9DQVNFLkdCMjMxMjpcblx0XHRjYXNlIENPREVDX0RBVEFfTkFNRV9UT19VUFBFUl9DQVNFLlVURl8xNl9MRTpcblx0XHRjYXNlIENPREVDX0RBVEFfTkFNRV9UT19VUFBFUl9DQVNFLlVURl8xNl9CRTpcblx0XHRjYXNlIENPREVDX0RBVEFfTkFNRV9UT19VUFBFUl9DQVNFLkVVQ19KUDpcblx0XHRjYXNlIENPREVDX0RBVEFfTkFNRV9UT19VUFBFUl9DQVNFLlNISUZUX0pJUzpcblx0XHRcdGRhdGEgPSBpY29udkxpdGUuZGVjb2RlKHN0ciwgZnJvbSk7XG5cdFx0XHRicmVhaztcblx0XHQvL2Nhc2UgJ0FTQ0lJJzpcblx0XHQvL2Nhc2UgJ1VURi04Jzpcblx0XHRjYXNlIENPREVDX0RBVEFfTkFNRV9UT19VUFBFUl9DQVNFLkFTQ0lJOlxuXHRcdGNhc2UgQ09ERUNfREFUQV9OQU1FX1RPX1VQUEVSX0NBU0UuVVRGXzg6XG5cdFx0XHRkYXRhID0gc3RyO1xuXHRcdFx0YnJlYWs7XG5cdFx0ZGVmYXVsdDpcblx0XHRcdGMgPSBjIHx8IGRldGVjdChzdHIpO1xuXG5cdFx0XHQvLyBAdHMtaWdub3JlXG5cdFx0XHRpZiAoIWljb252TGl0ZS5za2lwRGVjb2RlV2FybmluZylcblx0XHRcdHtcblx0XHRcdFx0Y29uc29sZS53YXJuKCdkZWNvZGUnLCBmcm9tLCBjKTtcblx0XHRcdH1cblxuXHRcdFx0Ly9kYXRhID0gc3RyO1xuXHRcdFx0ZGF0YSA9IGljb252TGl0ZS5kZWNvZGUoc3RyLCBmcm9tKTtcblx0XHRcdGJyZWFrO1xuXHR9XG5cblx0cmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICog5qqi5ris6Ly45YWl5YWn5a6557eo56K85Lim5LiU6L2J5o+b54K6IEJ1ZmZlclxuICovXG5leHBvcnQgZnVuY3Rpb24gZW5jb2RlKHN0ciwgdG86IHZFbmNvZGluZyA9IEVOVU1fTk9ERV9FTkNPRElORy5VVEY4LCBmcm9tOiB2RW5jb2RpbmcgPSBudWxsKTogQnVmZmVyXG57XG5cdGxldCBidWYgPSBCdWZmZXJGcm9tKHN0ciwgRU5VTV9OT0RFX0VOQ09ESU5HLlVURjgpO1xuXG5cdC8vIEB0cy1pZ25vcmVcblx0cmV0dXJuIGljb252TGl0ZS5lbmNvZGUoYnVmLCB0byk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGV4cG9ydHMgYXMgdHlwZW9mIGltcG9ydCgnLi9pbmRleCcpO1xuIl19